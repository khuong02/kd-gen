// Code generated by enum generate; DO NOT EDIT.

package core

import (
	"fmt"
	"strings"
)

type Lang string

const (
	LangEnglish    Lang = "English"
	LangVietnamese Lang = "Vietnamese"
	LangFrench     Lang = "French"
	LangSpanish    Lang = "Spanish"
	LangChinese    Lang = "Chinese"
)

var LangMap = map[Lang]interface{}{
	LangEnglish:    "en",
	LangVietnamese: "vi",
	LangFrench:     "fr",
	LangSpanish:    "es",
	LangChinese:    "zh",
}

var AllLangs = []Lang{
	LangEnglish,
	LangVietnamese,
	LangFrench,
	LangSpanish,
	LangChinese,
}

func (x Lang) String() string {
	switch x {
	case LangEnglish:
		return "English"
	case LangVietnamese:
		return "Vietnamese"
	case LangFrench:
		return "French"
	case LangSpanish:
		return "Spanish"
	case LangChinese:
		return "Chinese"
	}
	return "UNKNOWN"
}

func (x Lang) Normalize() Lang {
	return Lang(strings.ToLower(string(x)))
}

func ParseLang(s string) (Lang, error) {
	switch s {
	case "English":
		return LangEnglish, nil
	case "Vietnamese":
		return LangVietnamese, nil
	case "French":
		return LangFrench, nil
	case "Spanish":
		return LangSpanish, nil
	case "Chinese":
		return LangChinese, nil
	}
	return "", fmt.Errorf("invalid Lang: %s", s)
}

type LogLevel int

const (
	Debug LogLevel = iota
	Info
	Warn
	Error
	Fatal
)

var AllLogLevels = []LogLevel{
	Debug,
	Info,
	Warn,
	Error,
	Fatal,
}

func (x LogLevel) String() string {
	switch x {
	case Debug:
		return "Debug"
	case Info:
		return "Info"
	case Warn:
		return "Warn"
	case Error:
		return "Error"
	case Fatal:
		return "Fatal"
	}
	return "UNKNOWN"
}

func ParseLogLevel(s string) (LogLevel, error) {
	switch s {
	case "Debug":
		return Debug, nil
	case "Info":
		return Info, nil
	case "Warn":
		return Warn, nil
	case "Error":
		return Error, nil
	case "Fatal":
		return Fatal, nil
	}
	return 0, fmt.Errorf("invalid LogLevel: %s", s)
}
