// Code generated by enum generate; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

type Lang string

const (
	LangEnglish    Lang = "English"
	LangVietnamese Lang = "Vietnamese"
	LangFrench     Lang = "French"
	LangSpanish    Lang = "Spanish"
	LangChinese    Lang = "Chinese"
)

func (x Lang) IsLangEnglish() bool {
	return x == LangEnglish
}
func (x Lang) IsLangVietnamese() bool {
	return x == LangVietnamese
}
func (x Lang) IsLangFrench() bool {
	return x == LangFrench
}
func (x Lang) IsLangSpanish() bool {
	return x == LangSpanish
}
func (x Lang) IsLangChinese() bool {
	return x == LangChinese
}

var LangMap = map[Lang]interface{}{
	LangEnglish:    "en",
	LangVietnamese: "vi",
	LangFrench:     "fr",
	LangSpanish:    "es",
	LangChinese:    "zh",
}

var AllLangs = []Lang{
	LangEnglish,
	LangVietnamese,
	LangFrench,
	LangSpanish,
	LangChinese,
}

func (x Lang) String() string {
	switch x {
	case LangEnglish:
		return "English"
	case LangVietnamese:
		return "Vietnamese"
	case LangFrench:
		return "French"
	case LangSpanish:
		return "Spanish"
	case LangChinese:
		return "Chinese"
	}
	return "UNKNOWN"
}

func (x Lang) Normalize() Lang {
	return Lang(strings.ToLower(string(x)))
}

func ParseLang(s string) (Lang, error) {
	switch s {
	case "English":
		return LangEnglish, nil
	case "Vietnamese":
		return LangVietnamese, nil
	case "French":
		return LangFrench, nil
	case "Spanish":
		return LangSpanish, nil
	case "Chinese":
		return LangChinese, nil
	}
	return "", fmt.Errorf("invalid Lang: %s", s)
}

func (x Lang) MarshalJSON() ([]byte, error) {
	return json.Marshal(x)
}
func (x *Lang) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	return nil
}

func (x Lang) Value() (driver.Value, error) {
	return json.Marshal(x)
}
func (x *Lang) Scan(value interface{}) error {
	var v Lang
	if err := json.Unmarshal(value.([]byte), &v); err != nil {
		return err
	}
	return nil
}

type LogLevel int

const (
	Debug LogLevel = iota
	Info
	Warn
	Error
	Fatal
)

func (x LogLevel) IsDebug() bool {
	return x == Debug
}
func (x LogLevel) IsInfo() bool {
	return x == Info
}
func (x LogLevel) IsWarn() bool {
	return x == Warn
}
func (x LogLevel) IsError() bool {
	return x == Error
}
func (x LogLevel) IsFatal() bool {
	return x == Fatal
}

var AllLogLevels = []LogLevel{
	Debug,
	Info,
	Warn,
	Error,
	Fatal,
}
